'''
shop actually displays what it's selling
difficulty escatlation
3 cards

BASIC DONE!

ideas for classes
'''

#setup
import math
import random
# generate random integer values
from random import seed
from random import randint
# seed random number generator=
from datetime import datetime
random.seed(datetime.now())

import pygame

pygame.init()

screen = pygame.display.set_mode((1000,550))

pygame.display.set_caption("Dungeon")

#game stats (setup)
stage = 1
card_count = 0

boss_activated = False
#dummy
mx = 0
my = 0

#fonts
font = pygame.font.Font('freesansbold.ttf', 30)

#colours
orange = (252, 169, 3)
black = (0, 0, 0)

#classes

class PC():
    def __init__ (self, base_maxhp, base_attack, base_gold, base_defense):
        self.maxhp = base_maxhp
        self.hp = self.maxhp
        self.attack = base_attack
        self.gold = base_gold
        self.defense = base_defense

class Card():
    def __init__(self, seed):
        self.seed = seed

        self.type = randint(1, 2) # 1 for combat, 2 for shop
    
    def generate(self, seed):
        global claiming_reward
        global card_count
        global boss_activated

        self.type = randint(1, 2) # 1 for combat, 2 for shop

        card_count += 1
        if card_count <= 12:

        
            if self.type == 1:
                self.hp = math.ceil(10 * (((randint(1, (1000 + seed)) % 9) - 5) * 0.05 + 1))
                self.attack = math.ceil(3 * (((randint(1, (2000 + seed)) % 9) - 5) * 0.05 + 1))
                self.gold_reward = math.ceil(10 * (((randint(1, (3000 + seed)) % 9) - 5) * 0.05 + 1))
            
            if self.type == 2:
                self.reward_type = randint(1, (100 + seed)) % 4 #0 healing, 1 maxhp, 2 attack, 3 defense
                if self.reward_type == 0:
                    self.gold_cost = randint(1, 3)
                    self.reward_amount = randint(1, 10)
                    def claiming_reward():
                        player.hp += self.reward_amount
                        if player.hp > player.maxhp:
                            player.hp = player.maxhp
                elif self.reward_type == 1:
                    self.gold_cost = randint(4, 6)
                    self.reward_amount = randint(1, 3)
                    def claiming_reward():
                        player.maxhp += self.reward_amount
                elif self.reward_type == 2:
                    self.gold_cost = randint(1, 3)
                    self.reward_amount = randint(3, 5)
                    def claiming_reward():
                        player.attack += self.reward_amount           
                elif self.reward_type == 3:
                    self.gold_cost = randint(6, 10)
                    self.reward_amount = randint(1, 2)
                    def claiming_reward():
                        player.defense += self.reward_amount
        
        elif card_count == 15:
            boss_activated = True

class Boss():
    def __init__(self):

        self.hp = 50 * math.ceil((randint(75, 125))/100 * stage)
        self.attack = 5 * math.ceil((randint(74, 126))/100 * stage)
        self.gold_reward = 50 * math.ceil((randint(73, 127))/100 * stage)
    
    def refresh(self):

        self.hp = 50 * math.ceil((randint(75, 125))/100 * stage)
        self.attack = 5 * math.ceil((randint(74, 126))/100 * stage)
        self.gold_reward = 50 * math.ceil((randint(73, 127))/100 * stage)

class gap():
    def __init__(self):
        self.gap = False

gap_1 = gap()

#game stats
stage = 1
cards_remaining = 10
#remember that classes need to to be updates in the game restart function as well
warrior = PC(10, 5, 6, 2)
noble = PC(5, 3, 20, 1)

player = warrior


#MAIN MENU
#----------------------------------------------
def main_menu():
    global main_menu_display
    global character_selection_display

    title = font.render("Dungeon!", True, black)
    credit = font.render("Made by Josh Zhang", True, black)
    begin = font.render("Begin!", True, black)

    screen.blit(title, (50, 150))
    screen.blit(credit, (50, 190))
    screen.blit(begin, (50, 230))

    if mx > 1 and my > 1 and gap_1.gap == False:
        main_menu_display = False
        character_selection_display = True
        gap_1.gap = True

#CLASS SELECTION
#----------------------------------------------
def character_selection():
    warrior = font.render("Warrior", True, black)
    noble = font.render("Noble", True, black)

    screen.blit(warrior, (250, 50))
    screen.blit(noble, (750, 50))

    pygame.draw.line(screen, black, (500, 0), (500, 550)) 

def player_selecting_class():
    global character_selection_display
    global actual_game_display

    global player

    if gap_1.gap == False:
        if mx < 500:
            player = warrior
            gap_1.gap = True
        else:
            player = noble
            gap_1.gap = True
        
        character_selection_display = False
        actual_game_display = True


#ACTUAL GAME
#----------------------------------------------

#player stats
def display_player_stats():
    player_hp = font.render(("HP:" + str(player.hp) + "/" + str(player.maxhp)), True, black)
    player_gold = font.render(("Gold:" + str(player.gold)), True, black)
    player_attack = font.render(("Attack:" + str(player.attack)), True, black)
    player_defense = font.render(("Defense:" + str(player.defense)), True, black)
    player_card_count = font.render(("Card Count:" + str(card_count)), True, black)
    player_stage_count = font.render(("Stage Count:" + str(stage)), True, black)
    
    screen.blit(player_hp, (25, 25))
    screen.blit(player_gold, (25, 55))
    screen.blit(player_attack, (225, 25))
    screen.blit(player_defense, (225, 55))
    screen.blit(player_card_count, (425, 25))
    screen.blit(player_stage_count, (425, 55))

#card 1
card_1_stats = Card(1)

card_1 = pygame.Surface((300, 400))
card_1.fill((100, 0, 0))
def display_card_1():
    screen.blit(card_1, (25, 125)) #gap of 25 on both sides and beneath

def display_card_1_info():
    if card_1_stats.type == 1: #enemy
        card_1_hp = font.render("HP" + str(card_1_stats.hp), True, black)
        card_1_attack = font.render("Attack" + str(card_1_stats.attack), True, black)
        card_1_gold_reward = font.render("Gold reward" + str(card_1_stats.gold_reward), True, black)

        screen.blit(card_1_hp, (50, 150))
        screen.blit(card_1_attack, (50, 190))
        screen.blit(card_1_gold_reward, (50, 230))

    elif card_1_stats.type == 2: #shop
        if card_1_stats.reward_type == 0:
            item_type = "Healing"
        elif card_1_stats.reward_type == 1:
            item_type = "MaxHP"
        elif card_1_stats.reward_type == 2:
            item_type = "Attack"
        elif card_1_stats.reward_type == 3:
            item_type = "Defense"
            
        card_1_reward_type = font.render(item_type, True, black)
        card_1_reward_amount = font.render("Reward amount" + str(card_1_stats.reward_amount), True, black)
        card_1_gold_cost = font.render("Gold cost" + str(card_1_stats.gold_cost), True, black)

        screen.blit(card_1_reward_type, (50, 150))
        screen.blit(card_1_reward_amount, (50, 190))
        screen.blit(card_1_gold_cost, (50, 230))

def selecting_card_1():
    if mx > 25 and mx < 325 and my > 125 and my < 475 and gap_1.gap == False and card_count <= 12:
        gap_1.gap = True
        global card_1_stats
        if card_count > 0:
            if card_1_stats.type == 1:
                card_1_stats.hp -= player.attack
                if card_1_stats.hp <= 0:
                    player.gold += card_1_stats.gold_reward
                    card_1_stats.generate(1)
                elif card_1_stats.hp > 0:
                    if card_1_stats.attack > player.defense:
                        player.hp = player.hp + player.defense - card_1_stats.attack

            elif card_1_stats.type == 2:
                if player.gold >= card_1_stats.gold_cost:
                    player.gold -= card_1_stats.gold_cost
                    claiming_reward()
                    card_1_stats.generate(1)
        elif card_count == 0:
            card_1_stats.generate(1)

def skipping_card_1():
    if mx > 25 and mx < 325 and my > 475 and my < 525 and gap_1.gap == False and card_count <= 12:
        card_1_stats.generate(1)
        gap_1.gap = True

def skip_line():
    pygame.draw.line(screen, black, (0, 475), (1000, 475)) 

#card 2
card_2_stats = Card(2)


card_2 = pygame.Surface((300, 400))
card_2.fill((0, 100, 0))
def display_card_2():
    screen.blit(card_2, (350, 125)) #gap of 25 on both sides and beneath

def display_card_2_info():
    if card_2_stats.type == 1: #enemy
        card_2_hp = font.render("HP" + str(card_2_stats.hp), True, black)
        card_2_attack = font.render("Attack" + str(card_2_stats.attack), True, black)
        card_2_gold_reward = font.render("Gold reward" + str(card_2_stats.gold_reward), True, black)

        screen.blit(card_2_hp, (350, 150))
        screen.blit(card_2_attack, (350, 190))
        screen.blit(card_2_gold_reward, (350, 230))

    elif card_2_stats.type == 2: #shop
        if card_2_stats.reward_type == 0:
            item_type = "Healing"
        elif card_2_stats.reward_type == 1:
            item_type = "MaxHP"
        elif card_2_stats.reward_type == 2:
            item_type = "Attack"
        elif card_2_stats.reward_type == 3:
            item_type = "Defense"
            
        card_2_reward_type = font.render(item_type, True, black)
        card_2_reward_amount = font.render("Reward amount" + str(card_2_stats.reward_amount), True, black)
        card_2_gold_cost = font.render("Gold cost" + str(card_2_stats.gold_cost), True, black)

        screen.blit(card_2_reward_type, (350, 150))
        screen.blit(card_2_reward_amount, (350, 190))
        screen.blit(card_2_gold_cost, (350, 230))

def selecting_card_2():
    if mx > 350 and mx < 650 and my > 125 and my < 475 and gap_1.gap == False and card_count <= 12:
        gap_1.gap = True
        global card_2_stats
        if card_count > 0:
            if card_2_stats.type == 1:
                card_2_stats.hp -= player.attack
                if card_2_stats.hp <= 0:
                    player.gold += card_2_stats.gold_reward
                    card_2_stats.generate(2)
                elif card_2_stats.hp > 0:
                    if card_2_stats.attack > player.defense:
                        player.hp = player.hp + player.defense - card_2_stats.attack

            elif card_2_stats.type == 2:
                if player.gold >= card_2_stats.gold_cost:
                    player.gold -= card_2_stats.gold_cost
                    claiming_reward()
                    card_2_stats.generate(2)
        elif card_count == 0:
            card_2_stats.generate(2)

def skipping_card_2():
    if mx > 350 and mx < 650 and my > 475 and my < 525 and gap_1.gap == False and card_count <= 12:
        card_2_stats.generate(2)
        gap_1.gap = True


#card 3

card_3_stats = Card(3)

card_3 = pygame.Surface((300, 400))
card_3.fill((0, 0, 100))
def display_card_3():
    screen.blit(card_3, (675, 125)) #gap of 25 on both sides and beneath

def display_card_3_info():
    if card_3_stats.type == 1: #enemy
        card_3_hp = font.render("HP" + str(card_3_stats.hp), True, black)
        card_3_attack = font.render("Attack" + str(card_3_stats.attack), True, black)
        card_3_gold_reward = font.render("Gold reward" + str(card_3_stats.gold_reward), True, black)

        screen.blit(card_3_hp, (700, 150))
        screen.blit(card_3_attack, (700, 190))
        screen.blit(card_3_gold_reward, (700, 230))

    elif card_3_stats.type == 2: #shop
        if card_3_stats.reward_type == 0:
            item_type = "Healing"
        elif card_3_stats.reward_type == 1:
            item_type = "MaxHP"
        elif card_3_stats.reward_type == 2:
            item_type = "Attack"
        elif card_3_stats.reward_type == 3:
            item_type = "Defense"
            
        card_3_reward_type = font.render(item_type, True, black)
        card_3_reward_amount = font.render("Reward amount" + str(card_3_stats.reward_amount), True, black)
        card_3_gold_cost = font.render("Gold cost" + str(card_3_stats.gold_cost), True, black)

        screen.blit(card_3_reward_type, (700, 150))
        screen.blit(card_3_reward_amount, (700, 190))
        screen.blit(card_3_gold_cost, (700, 230))

def selecting_card_3():
    if mx > 675 and mx < 925 and my > 125 and my < 475 and gap_1.gap == False and card_count <= 14:
        gap_1.gap = True
        global card_3_stats
        if card_count > 0:
            if card_3_stats.type == 1:
                card_3_stats.hp -= player.attack
                if card_3_stats.hp <= 0:
                    player.gold += card_3_stats.gold_reward
                    card_3_stats.generate(3)
                elif card_3_stats.hp > 0:
                    if card_3_stats.attack > player.defense:
                        player.hp = player.hp + player.defense - card_3_stats.attack

            elif card_3_stats.type == 2:
                if player.gold >= card_3_stats.gold_cost:
                    player.gold -= card_3_stats.gold_cost
                    claiming_reward()
                    card_3_stats.generate(3)
        elif card_count == 0:
            card_3_stats.generate(3)

def skipping_card_3():
    if mx > 675 and mx < 975 and my > 475 and my < 525 and gap_1.gap == False and card_count <= 14:
        card_3_stats.generate(3)
        gap_1.gap = True

def game_over_checker():
    global actual_game_display
    global game_over_display

    if player.hp <= 0:
        actual_game_display = False
        game_over_display = True

#BOSS FIGHT
#---------------------------------

boss_1_stats = Boss()

def display_boss_info():
    boss_hp = font.render("HP" + str(boss_1_stats.hp), True, black)
    boss_attack = font.render("Attack" + str(boss_1_stats.attack), True, black)
    boss_gold_reward = font.render("Gold reward" + str(boss_1_stats.gold_reward), True, black)

    screen.blit(boss_hp, (350, 150))
    screen.blit(boss_attack, (350, 190))
    screen.blit(boss_gold_reward, (350, 230))


def selecting_boss():
    global boss_activated
    global card_count
    global stage

    if mx > 350 and mx < 650 and my > 125 and my < 525 and gap_1.gap == False:
        gap_1.gap = True
        global boss_1_stats

        boss_1_stats.hp -= player.attack
        if boss_1_stats.hp <= 0:
            player.gold += boss_1_stats.gold_reward
            boss_1_stats.refresh()
            boss_activated = False
            card_count = 0
            stage += 1
        elif boss_1_stats.hp > 0:
            if boss_1_stats.attack > player.defense:
                player.hp = player.hp + player.defense - boss_1_stats.attack

#GAME OVER
#---------------------------------
def game_over_text():
    game_over = font.render("Game Over...", True, black)
    screen.blit(game_over, (50, 150))

def restart():
    if gap_1.gap == False:
        global game_over_display
        global main_menu_display

        game_over_display = False
        main_menu_display = True
        gap_1.gap = True

#game states
main_menu_display = True
character_selection_display = False
actual_game_display = False
game_over_display = False

#running the game
running = True
while running:

    #controlling what the player sees

    screen.fill(orange) #252, 169, 3
    if main_menu_display == True:
        main_menu()

    if character_selection_display == True:
        character_selection()

    if actual_game_display == True:
        display_player_stats()
        display_card_1()
        display_card_2()
        display_card_3()
        if card_count > 0 and card_count <= 14:
            display_card_1_info()
            display_card_2_info()
            display_card_3_info()
            skip_line()
        if boss_activated == True:
            display_boss_info()
        game_over_checker()


    if game_over_display == True:
        game_over_text()


    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if event.type == pygame.MOUSEBUTTONDOWN:
            mx, my = pygame.mouse.get_pos()

            gap_1.gap = False

            print (mx, my)

            #main menu
            if main_menu_display == True:
                main_menu()

            #character selection
            if character_selection_display == True:
                player_selecting_class()

            #actual game
            if actual_game_display == True:
                if card_count == 0:
                    card_1_stats.generate(1)
                    card_2_stats.generate(2)
                    card_3_stats.generate(3)
                selecting_card_1()
                skipping_card_1()
                selecting_card_2()
                skipping_card_2()
                selecting_card_3()
                skipping_card_3()
                if boss_activated == True:
                    selecting_boss()
            
            #game over
            if game_over_display == True:
                warrior = PC(10, 5, 3, 1)
                noble = PC(5, 3, 20, 1)
                restart()


    pygame.display.update()
