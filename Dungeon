'''
boss fight, 3 cards
'''


#setup
import math
import random
# generate random integer values
from random import seed
from random import randint
# seed random number generator=
from datetime import datetime
random.seed(datetime.now())

import pygame

pygame.init()

screen = pygame.display.set_mode((1000,550))

pygame.display.set_caption("Dungeon")

stage = 1

#dummy
mx = 0
my = 0

#fonts
font = pygame.font.Font('freesansbold.ttf', 30)

#colours
orange = (252, 169, 3)
black = (0, 0, 0)

#classes

class PC():
    def __init__ (self, base_maxhp, base_attack, base_gold, base_defense):
        self.maxhp = base_maxhp
        self.hp = self.maxhp
        self.attack = base_attack
        self.gold = base_gold
        self.defense = base_defense

class Card():
    def __init__(self, seed):
        global claiming_reward

        self.type = randint(1, 2) # 1 for combat, 2 for shop
    
        if self.type == 1:
            self.hp = math.ceil(10 * (((randint(1, (1000 + seed)) % 9) - 5) * 0.05 + 1))
            self.attack = math.ceil(3 * (((randint(1, (2000 + seed)) % 9) - 5) * 0.05 + 1))
            self.gold_reward = math.ceil(10 * (((randint(1, (3000 + seed)) % 9) - 5) * 0.05 + 1))
        
        if self.type == 2:
            self.reward_type = randint(1, (100 + seed)) % 4 #1 healing, 2 maxhp, 3 attack, 4 defense
            if self.reward_type == 0:
                self.gold_cost = randint(1, 3)
                self.reward_amount = randint(1, 10)
                def claiming_reward():
                    player.hp += self.reward_amount
                    if player.hp > player.maxhp:
                        player.hp = player.maxhp
            elif self.reward_type == 1:
                self.gold_cost = randint(4, 6)
                self.reward_amount = randint(1, 3)
                def claiming_reward():
                    player.maxhp += self.reward_amount
            elif self.reward_type == 2:
                self.gold_cost = randint(1, 3)
                self.reward_amount = randint(3, 5)
                def claiming_reward():
                    player.attack += self.reward_amount           
            elif self.reward_type == 3:
                self.gold_cost = randint(6, 10)
                self.reward_amount = randint(1, 2)
                def claiming_reward():
                    player.defense += self.reward_amount  
    
    def refresh(self, seed):
        global claiming_reward

        self.type = randint(1, 2) # 1 for combat, 2 for shop
    
        if self.type == 1:
            self.hp = math.ceil(10 * (((randint(1, (1000 + seed)) % 9) - 5) * 0.05 + 1))
            self.attack = math.ceil(3 * (((randint(1, (2000 + seed)) % 9) - 5) * 0.05 + 1))
            self.gold_reward = math.ceil(10 * (((randint(1, (3000 + seed)) % 9) - 5) * 0.05 + 1))
        
        if self.type == 2:
            self.reward_type = randint(1, (100 + seed)) % 4 #1 healing, 2 maxhp, 3 attack, 4 defense
            if self.reward_type == 0:
                self.gold_cost = randint(1, 3)
                self.reward_amount = randint(1, 10)
                def claiming_reward():
                    player.hp += self.reward_amount
                    if player.hp > player.maxhp:
                        player.hp = player.maxhp
            elif self.reward_type == 1:
                self.gold_cost = randint(4, 6)
                self.reward_amount = randint(1, 3)
                def claiming_reward():
                    print ('1')
                    player.maxhp += self.reward_amount
            elif self.reward_type == 2:
                self.gold_cost = randint(1, 3)
                self.reward_amount = randint(3, 5)
                def claiming_reward():
                    player.attack += self.reward_amount           
            elif self.reward_type == 3:
                self.gold_cost = randint(6, 10)
                self.reward_amount = randint(1, 2)
                def claiming_reward():
                    player.defense += self.reward_amount  

class Boss():
    def __init__(self):

        self.hp = 50 * math.ceil((randint(75, 125))/100 * stage)
        self.attack = 5 * math.ceil((randint(74, 124))/100 * stage)
        self.gold_reward = 50 * math.ceil((randint(73, 126))/100 * stage)
    
    def refresh():

        self.hp = 50 * math.ceil((randint(75, 125))/100 * stage)
        self.attack = 5 * math.ceil((randint(74, 124))/100 * stage)
        self.gold_reward = 50 * math.ceil((randint(73, 126))/100 * stage)

class gap():
    def __init__(self):
        self.gap = False

gap_1 = gap()

#game stats
stage = 1
cards_remaining = 10
warrior = PC(10, 5, 5, 1)
noble = PC(5, 3, 20, 1)

player = warrior


#MAIN MENU
#----------------------------------------------
def main_menu():
    global main_menu_display
    global character_selection_display

    title = font.render("Dungeon!", True, black)
    credit = font.render("Made by Josh Zhang", True, black)
    begin = font.render("Begin!", True, black)

    screen.blit(title, (50, 150))
    screen.blit(credit, (50, 190))
    screen.blit(begin, (50, 230))

    if mx > 1 and my > 1 and gap_1.gap == False:
        main_menu_display = False
        character_selection_display = True
        gap_1.gap = True

#CLASS SELECTION
#----------------------------------------------
def character_selection():
    warrior = font.render("Warrior", True, black)
    noble = font.render("Noble", True, black)

    screen.blit(warrior, (250, 50))
    screen.blit(noble, (750, 50))

    pygame.draw.line(screen, black, (500, 0), (500, 550)) 

def player_selecting_class():
    global character_selection_display
    global actual_game_display

    global player

    if gap_1.gap == False:
        if mx < 500:
            player = warrior
            gap_1.gap = True
        else:
            player = noble
            gap_1.gap = True
        
        character_selection_display = False
        actual_game_display = True


#ACTUAL GAME
#----------------------------------------------

#player stats
def display_player_stats():
    player_hp = font.render(("HP:" + str(player.hp) + "/" + str(player.maxhp)), True, black)
    player_gold = font.render(("Gold:" + str(player.gold)), True, black)
    player_attack = font.render(("Attack:" + str(player.attack)), True, black)
    player_defense = font.render(("Defense:" + str(player.defense)), True, black)
    
    screen.blit(player_hp, (25, 25))
    screen.blit(player_gold, (25, 55))
    screen.blit(player_attack, (225, 25))
    screen.blit(player_defense, (225, 55))

#card 1
card_1_stats = Card(1)

card_1 = pygame.Surface((300, 400))
card_1.fill((100, 0, 0))
def display_card_1():
    screen.blit(card_1, (25, 125)) #gap of 25 on both sides and beneath

def display_card_1_info():
    if card_1_stats.type == 1: #enemy
        card_1_hp = font.render("HP" + str(card_1_stats.hp), True, black)
        card_1_attack = font.render("Attack" + str(card_1_stats.attack), True, black)
        card_1_gold_reward = font.render("Gold reward" + str(card_1_stats.gold_reward), True, black)

        screen.blit(card_1_hp, (50, 150))
        screen.blit(card_1_attack, (50, 190))
        screen.blit(card_1_gold_reward, (50, 230))

    elif card_1_stats.type == 2: #shop
        card_1_reward_type = font.render("Reward type" + str(card_1_stats.reward_type), True, black)
        card_1_reward_amount = font.render("Reward amount" + str(card_1_stats.reward_amount), True, black)
        card_1_gold_cost = font.render("Gold cost" + str(card_1_stats.gold_cost), True, black)

        screen.blit(card_1_reward_type, (50, 150))
        screen.blit(card_1_reward_amount, (50, 190))
        screen.blit(card_1_gold_cost, (50, 230))

def selecting_card_1():
    if mx > 25 and mx < 325 and my > 125 and my < 475 and gap_1.gap == False:
        gap_1.gap = True
        global card_1_stats
        if card_1_stats.type == 1:
            card_1_stats.hp -= player.attack
            if card_1_stats.hp <= 0:
                player.gold += card_1_stats.gold_reward
                card_1_stats.refresh(1)
            elif card_1_stats.hp > 0:
                player.hp -= card_1_stats.attack

        elif card_1_stats.type == 2:
            if player.gold >= card_1_stats.gold_cost:
                player.gold -= card_1_stats.gold_cost
                claiming_reward()
                card_1_stats.refresh(1)

def skipping_card_1():
    if mx > 25 and mx < 325 and my > 475 and my < 525 and gap_1.gap == False:
        card_1_stats.refresh(1)
        gap_1.gap = True

def skip_line():
    pygame.draw.line(screen, black, (0, 475), (1000, 475)) 

#card 2

card_2 = pygame.Surface((300, 400))
card_2.fill((0, 100, 0))
def display_card_2():
    screen.blit(card_2, (350, 125)) #gap of 25 on both sides and beneath

#card 3

card_3 = pygame.Surface((300, 400))
card_3.fill((0, 0, 100))
def display_card_3():
    screen.blit(card_3, (675, 125)) #gap of 25 on both sides and beneath

zombie_image = pygame.image.load("zombie.png")

def zombie_image_display():
    screen.blit(zombie_image, (105, 312))


def game_over_checker():
    global actual_game_display
    global game_over_display

    if player.hp <= 0:
        actual_game_display = False
        game_over_display = True

#BOSS FIGHT

boss_1 = Boss()

#GAME OVER
#---------------------------------
def game_over_text():
    game_over = font.render("Game Over...", True, black)
    screen.blit(game_over, (50, 150))

def restart():
    if gap_1.gap == False:
        global game_over_display
        global main_menu_display

        game_over_display = False
        main_menu_display = True
        gap_1.gap = True

#game states
main_menu_display = True
character_selection_display = False
actual_game_display = False
game_over_display = False

#running the game
running = True
while running:

    #controlling what the player sees

    screen.fill(orange) #252, 169, 3
    if main_menu_display == True:
        main_menu()

    if character_selection_display == True:
        character_selection()

    if actual_game_display == True:
        display_player_stats()
        display_card_1()
        display_card_2()
        display_card_3()
        zombie_image_display()
        display_card_1_info()
        game_over_checker()
        skip_line()

    if game_over_display == True:
        game_over_text()


    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if event.type == pygame.MOUSEBUTTONDOWN:
            mx, my = pygame.mouse.get_pos()

            gap_1.gap = False

            print (mx, my)

            #main menu
            if main_menu_display == True:
                main_menu()

            #character selection
            if character_selection_display == True:
                player_selecting_class()

            #actual game
            if actual_game_display == True:
                selecting_card_1()
                skipping_card_1()
            
            #game over
            if game_over_display == True:
                warrior = PC(10, 5, 3, 1)
                noble = PC(5, 3, 20, 1)
                restart()


    pygame.display.update()
