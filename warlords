'''
Warlords
By Josh Zhang
2020/06/21
How do I have it so that once atleast, say 2, towers are destoyed the game ends?
For that matter how do I receive commands for which lane to deploy in?

Just do p1 fisrt, then add p2 after everything works

gotta add for the units in each lane to actually do damamge each turn, currently the while loop doesn't have any side taking damage

There also probably should be a way ato check all the stats

Note that defense and resistance stats don't go dont naturally. So stacking these becomes really strong late game
However obviously hp should be lower at that point so... this is nice
Could create some diffrent stratergies, some just build up physcial and magical attacks early
Others build up defense to be OP late game

2020/06/29
Okay redo. I like the whole building up defenses for late game idea, but having multiple lanes is too complicated right now.
MASSIVE REDO

2020/07/16
EVEN BIGGER REDO
Built a whole new version of my previous project "warlords" from the ground up.
Now in python 3 instead of python 2.
Biggest addition: classes! (TY C.G.!)
Added three troops.
The focus rn is to get it so that adding more troops is less tedious
Done! automated the process by combining user input string with another one, and then using eval() to run that code
Adding troops is actual so simple now
'''

#all the classes
class Player:
    hp = 0
    defense = 0
    resistance = 0
    def __init__(self, hp, defense, resistance):
        self.hp = hp
        self.defense = defense
        self.resistance = resistance

player1 = Player(50, 0, 0)
player2 = Player(50, 0, 0)

class Troop:
    physical_damage = 0
    magical_damage = 0
    true_damage = 0
    defense_gain = 0
    resistance_gain = 0
    deployment = 0
    def __init__(self, physical_damage, magical_damage, true_damage, defense_gain, resistance_gain, deployment):
        self.physical_damage = physical_damage
        self.magical_damage = magical_damage
        self.true_damage = true_damage
        self.defense_gain = defense_gain
        self.resistance_gain = resistance_gain
        self.deployment = deployment
    def attack(self, ally, opponent):
        opponent.hp = opponent.hp - self.physical_damage * (1 - opponent.defense * 0.01) 
        opponent.hp = opponent.hp - self.magical_damage * (1 - opponent.resistance * 0.01) 
        opponent.hp = opponent.hp - self.true_damage
        ally.defense = ally.defense + self.defense_gain
        ally.resistance = ally.resistance + self.resistance_gain

#all the troops
spearmen = Troop(10, 5, 3, 3, 1, 5)
battlemage = Troop(3, 20, 6, 1, 2, 7)
engineer = Troop(3, 0, 0, 20, 8, 4)

troop_list = ["spearmen" , "battlemage" , "engineer"]

#variable set up
game_on = True
delay1 = 0
delay2 = 0
text1 = "a"
text2 = "a"
unit_select1 = False
unit_select2 = False

#running the game
while game_on == True and player1.hp > 0 and player2.hp > 0:
    delay1 = delay1 - 1
    delay2 = delay2 - 1
    if delay1 == 0 or delay2 == 0:
        print ("player1 hp:" , player1.hp)
        print ("player2 hp:" , player2.hp)
    
    #troop deployment after their deployment delay is up
    if delay1 <= 0 and text1 in troop_list:
        sum12 = text1 + ".attack(player1, player2)"
        eval(sum12)
    
    if delay2 <= 0 and text2 in troop_list:
        sum22 = text2 + ".attack(player2, player1)"
        eval(sum22)

    #having the players pick which troop to deploy
    if delay1 <= 0:
        unit_select1 = True
        while unit_select1 == True:
            print ("player 1, what would you like to deploy?")
            text1 = input()
            if text1 == "quit":
                game_on = False
                unit_select1 = False
            elif text1 in troop_list:
                sum11 = text1 + ".deployment"
                delay1 = eval(sum11)
                unit_select1 = False
            else:
                print ("invalide input, please try again")

    if delay2 <= 0:
        unit_select2 = True
        while unit_select2 == True:
            print ("player 2, what would you like to deploy?")
            text2 = input()
            if text2 == "quit":
                game_on = False
                unit_select2 = False
            elif text2 in troop_list:
                sum21 = text2 + ".deployment"
                delay2 = eval(sum21)
                unit_select2 = False
            else:
                print ("invalide input, please try again")

#printing battle results
if player1.hp > 0 and player2.hp <= 0:
    print ("player 1 wins!")
elif player2.hp > 0 and player1.hp <= 0:
    print ("player 2 wins!")
elif player1.hp <= 0 and player2.hp <= 0:
    print ("both sides have been destroyed...")
else:
    print ("you have quit the game")
